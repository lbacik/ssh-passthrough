#!/usr/bin/env node
//
// Copyright (C) 2015 Lukasz Bacik <mail@luka.sh>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

const program = require('commander')
const Server = require('ssh2').Server
const pjson = require('./package.json')
const Provider = require('./src/provider')
const SshPassthroughListener = require('./src/ssh-server-listener.js')
const winston = require('winston');

const VERSION = pjson.version
const DEFAULT_PORT = 22
const DEFAULT_ADDRESS = '127.0.0.1'
const DEFAULT_TARGET = 'shell'
const DEFAULT_SERVER_KEY_FILE = 'server-key'
const DEFAULT_DOCKER_SOCKET = '/var/run/docker.sock'
const DEFAULT_COMBINE_USERNAME_SEPARATOR = '/'

const DEFAULT_SHELL = process.env.SHELL || '/bin/sh'
const DEFAULT_AUTH_METHOD = process.env.AUTH_METHOD || 'password'
const AUTH_USER = process.env.AUTH_USER || null
const AUTH_PASS = process.env.AUTH_PASS || null

const logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)()
  ],
  level: 'debug'
});

program
  .version(VERSION)
  .option('--server-prv-key [path]', '', DEFAULT_SERVER_KEY_FILE)
  .option('-a, --address [ip]', '', DEFAULT_ADDRESS)
  .option('-p, --port [port]', '', DEFAULT_PORT)
  .option('--target [target]', '', DEFAULT_TARGET)
  .option('-s, --shell [shell]', '', DEFAULT_SHELL)
  .option('--docker-socket [socket]', '', DEFAULT_DOCKER_SOCKET)
  .option('--combine-username', '')
  .option('--combine-username-separator [separator]', '', DEFAULT_COMBINE_USERNAME_SEPARATOR)
  .option('--auth [method]', '', DEFAULT_AUTH_METHOD)
  .option('--auth-password-user [user]', '', AUTH_USER)
  .option('--auth-password-pass [password]', '', AUTH_PASS)
  .parse(process.argv)

const serverPort = program.port
const serverAddress = program.address

const provider = new Provider(
  VERSION,
  program,
  logger
)

const passthrough = provider.passthrough()
const authMethod = provider.authMethod()
const hostPrvKey = provider.hostPrvKey()

let usernameSeparator
if (program.combineUsername === true) {
  usernameSeparator = program.combineUsernameSeparator
}
const listenerOptions = {
  combineUsernameSeparator: usernameSeparator
}

new Server({
  hostKeys: [hostPrvKey],
}, (client) => {
  const sshPassthroughListener =
    new SshPassthroughListener(
      listenerOptions,
      passthrough,
      authMethod,
      logger
    )
  sshPassthroughListener.connectionRequest(client)
}).listen(serverPort, serverAddress, () => {
  logger.info(`Listening on port ${serverAddress}:${serverPort}`)
})
