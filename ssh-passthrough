#!/usr/bin/env node
//
// Copyright (C) 2015 Lukasz Bacik <mail@luka.sh>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

const program = require('commander')
const Server = require('ssh2').Server
const pjson = require('./package.json')
const Provider = require('./src/provider')
const SshPassthroughListener = require('./src/ssh-server-listener.js')
const winston = require('winston');

const VERSION = pjson.version
const DEFAULT_PORT = 22
const DEFAULT_ADDRESS = '127.0.0.1'
const DEFAULT_TARGET = 'shell'
const DEFAULT_SERVER_KEY_FILE = 'server-key'
const DEFAULT_DOCKER_SOCKET = '/var/run/docker.sock'
const DEFAULT_COMBINE_USERNAME_SEPARATOR = '/'

const DEFAULT_SHELL = process.env.SHELL || '/bin/sh'
const DEFAULT_AUTH_METHOD = process.env.AUTH_METHOD || 'password'
const AUTH_USER = process.env.AUTH_USER || null
const AUTH_PASS = process.env.AUTH_PASS || null
const AUTH_AUTHORIZED_KEYS = process.env.AUTHORIZED_KEYS || null

const logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)()
  ],
  level: 'debug'
});

program
  .version(VERSION)
  .description(`ssh "passthrough" server for containers environments, version: ${VERSION}`)
  .option('--server-prv-key [path]',
    `ssh private key used by ssh-passthrough server (default: ${DEFAULT_SERVER_KEY_FILE})`,
    DEFAULT_SERVER_KEY_FILE
  )
  .option('-a, --address [ip]',
    `ip address the server should use (default: ${DEFAULT_ADDRESS})`,
    DEFAULT_ADDRESS
  )
  .option('-p, --port [port]',
    `port the server should listening on (default: ${DEFAULT_PORT})`,
    DEFAULT_PORT
  )
  .option('--target [target]',
    `(1) "shell" (not very useful, only for tests right now), (2) "docker" (default: ${DEFAULT_TARGET})`,
    DEFAULT_TARGET
  )
  .option('-s, --shell [shell]',
    `shell/process that should be started on "target" to handle the connection (default: ${DEFAULT_SHELL})`,
    DEFAULT_SHELL
  )
  .option('--docker-socket [socket]',
    `docker api endpoint (default: ${DEFAULT_DOCKER_SOCKET})`,
    DEFAULT_DOCKER_SOCKET
  )
  .option('--combine-username',
    'whether the user part of ssh connection string contains the container name or not (makes sense when auth=password)'
  )
  .option('--combine-username-separator [separator]',
    `separator used to separate the extra data (container name) and username in ssh login string (default: ${DEFAULT_COMBINE_USERNAME_SEPARATOR})`,
    DEFAULT_COMBINE_USERNAME_SEPARATOR
  )
  .option('--auth [method]',
    `authentication method used by server: (1) "none", (2) "password" or (3) "publickey" (default: ${DEFAULT_AUTH_METHOD})`,
    DEFAULT_AUTH_METHOD
  )
  .option('--auth-password-user [user]',
    'username used when password authentication method has been chosen',
    AUTH_USER
  )
  .option('--auth-password-pass [password]',
    'password used when password authentication method has been chosen',
    AUTH_PASS
  )
  .option('--auth-authorized-keys [file]',
    'file contains allowed users ssh public keys used when pubilckey authentication method has been chosen',
    AUTH_AUTHORIZED_KEYS
  )

program.on('--help', () => {
  console.log()
  console.log('for more information please visit: https://github.com/lbacik/ssh-passthrough')
  console.log()
})

program.parse(process.argv)

const serverPort = program.port
const serverAddress = program.address

const provider = new Provider(
  VERSION,
  program,
  logger
)

const authMethod = provider.authMethod()
const hostPrvKey = provider.hostPrvKey()

let usernameSeparator
if (program.combineUsername === true) {
  usernameSeparator = program.combineUsernameSeparator
}
const listenerOptions = {
  combineUsernameSeparator: usernameSeparator,
  authMethod: program.auth
}

new Server({
  hostKeys: [hostPrvKey],
}, (client) => {
  const sshPassthroughListener =
    new SshPassthroughListener(
      listenerOptions,
      provider,
      authMethod,
      logger
    )
  sshPassthroughListener.connectionRequest(client)
}).listen(serverPort, serverAddress, () => {
  logger.info(`Listening on port ${serverAddress}:${serverPort}`)
})
